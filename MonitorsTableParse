package JTableNewTest;
import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
 
public class MonitorsTableParse extends JFrame {
    static int i = 0;
	public int numstrok;
 
    public MonitorsTableParse() throws Exception {
    	super("Окно Парсера Мониторов");
   // 	VideoParser VP = new VideoParser();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        ArrayList<MyBean> beans = new ArrayList<MyBean>();

        Document doc;
        FileReader fr= new FileReader("C://Users/lenovo/Desktop/Krsch/linksMonitors.txt");
        Scanner scan = new Scanner(fr);
        int jf = 1;
      int numstrok = 1;
        try {
        //	while (jf<=3) {
        	while (scan.hasNextLine()) {
            doc = Jsoup.connect(scan.nextLine()).get();
            String searchedPrice = doc.getElementsByAttribute("data-price-value").get(0).html();
            String searchedName = doc.getElementsByAttribute("data-product-param").get(0).html();
            String searchedRating = doc.getElementsByAttributeValue("itemprop", "ratingValue").get(0).html();
            beans.add(new MyBean(searchedName, searchedPrice, searchedRating));
          //  jf++;
            numstrok++;
        	}
        } catch (IOException e) {
            e.printStackTrace();
        }
        fr.close();
        System.out.println("Количество Найденных Мониторов = " + (numstrok-1));
        TableModel model = new MyTableModel(beans);
        JTable table = new JTable(model);
        
        getContentPane().add(new JScrollPane(table));
 
        setPreferredSize(new Dimension(460, 420));
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }
 
    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JFrame.setDefaultLookAndFeelDecorated(true);
                try {
					new MonitorsTableParse();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
    }
 
    public class MyTableModel implements TableModel {
 
        private Set<TableModelListener> listeners = new HashSet<TableModelListener>();
 
        private List<MyBean> beans;
 
        public MyTableModel(List<MyBean> beans) {
            this.beans = beans;
        }
 
        public void addTableModelListener(TableModelListener listener) {
            listeners.add(listener);
        }
 
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }
 
        public int getColumnCount() {
            return 3;
        }
 
        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
            case 0:
                return "Имя";
            case 1:
                return "Цена";
            case 2:
                return "Рейтинг";
            }
            return "";
        }
 
        public int getRowCount() {
            return beans.size();
        }
 
        public Object getValueAt(int rowIndex, int columnIndex) {
            MyBean bean = beans.get(rowIndex);
            switch (columnIndex) {
            case 0:
                return bean.getName();
            case 1:
                return bean.getSize();
            case 2:
                return bean.getDescription();
            }
            return "";
        }
 
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
 
        public void removeTableModelListener(TableModelListener listener) {
            listeners.remove(listener);
        }
 
        public void setValueAt(Object value, int rowIndex, int columnIndex) {
 
        }
 
    }
 
    public class MyBean {
 
        private String name;
        private String size;
        private String description;
 
        public MyBean(String name, String size, String description) {
            this.setName(name);
            this.setSize(size);
            this.setDescription(description);
        }
 
        public void setName(String name) {
            this.name = name;
        }
 
        public String getName() {
            return name;
        }
 
        public void setSize(String size) {
            this.size = size;
        }
 
        public String getSize() {
            return size;
        }
 
        public void setDescription(String description) {
            this.description = description;
        }
 
        public String getDescription() {
            return description;
        }
    }
}
